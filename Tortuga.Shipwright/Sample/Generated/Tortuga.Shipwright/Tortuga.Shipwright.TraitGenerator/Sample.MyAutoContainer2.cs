//This file was generated by Tortuga Shipwright

namespace Sample
{
	partial class MyAutoContainer2: System.IAsyncDisposable, System.IDisposable
	{

		// These fields and/or properties hold the traits. They should not be referenced directly.
		private System.IO.MemoryStream __Trait0 = new();

		// Explicit interface implementation System.IAsyncDisposable
		System.Threading.Tasks.ValueTask System.IAsyncDisposable.DisposeAsync()
		{
			return ((System.IAsyncDisposable)__Trait0).DisposeAsync();
		}

		// Explicit interface implementation System.IDisposable
		void System.IDisposable.Dispose()
		{
			((System.IDisposable)__Trait0).Dispose();
		}

		// Exposing trait System.IO.MemoryStream

		
		public System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback? callback, System.Object? state)
		{
			return __Trait0.BeginRead(buffer, offset, count, callback, state);
		}

		
		public System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback? callback, System.Object? state)
		{
			return __Trait0.BeginWrite(buffer, offset, count, callback, state);
		}

		
		public   System.Boolean CanRead
		{
			get => __Trait0.CanRead;
		}
		
		public   System.Boolean CanSeek
		{
			get => __Trait0.CanSeek;
		}
		
		public   System.Boolean CanWrite
		{
			get => __Trait0.CanWrite;
		}
		
		public   System.Int32 Capacity
		{
			get => __Trait0.Capacity;
			set => __Trait0.Capacity = value;
		}
		
		public void CopyTo(System.IO.Stream destination, System.Int32 bufferSize)
		{
			__Trait0.CopyTo(destination, bufferSize);
		}

		
		public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, System.Int32 bufferSize, System.Threading.CancellationToken cancellationToken)
		{
			return __Trait0.CopyToAsync(destination, bufferSize, cancellationToken);
		}

		
		public System.Int32 EndRead(System.IAsyncResult asyncResult)
		{
			return __Trait0.EndRead(asyncResult);
		}

		
		public void EndWrite(System.IAsyncResult asyncResult)
		{
			__Trait0.EndWrite(asyncResult);
		}

		
		public void Flush()
		{
			__Trait0.Flush();
		}

		
		public System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)
		{
			return __Trait0.FlushAsync(cancellationToken);
		}

		
		public System.Byte[] GetBuffer()
		{
			return __Trait0.GetBuffer();
		}

		
		public   System.Int64 Length
		{
			get => __Trait0.Length;
		}
		
		public   System.Int64 Position
		{
			get => __Trait0.Position;
			set => __Trait0.Position = value;
		}
		
		public System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			return __Trait0.Read(buffer, offset, count);
		}

		
		public System.Int32 Read(System.Span<byte> buffer)
		{
			return __Trait0.Read(buffer);
		}

		
		public System.Threading.Tasks.Task<int> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
		{
			return __Trait0.ReadAsync(buffer, offset, count, cancellationToken);
		}

		
		public System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.Threading.CancellationToken cancellationToken = default)
		{
			return __Trait0.ReadAsync(buffer, cancellationToken);
		}

		
		public System.Int32 ReadByte()
		{
			return __Trait0.ReadByte();
		}

		
		public System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin loc)
		{
			return __Trait0.Seek(offset, loc);
		}

		
		public void SetLength(System.Int64 value)
		{
			__Trait0.SetLength(value);
		}

		
		public System.Byte[] ToArray()
		{
			return __Trait0.ToArray();
		}

		
		public System.Boolean TryGetBuffer(out System.ArraySegment<byte> buffer)
		{
			return __Trait0.TryGetBuffer(out buffer);
		}

		
		public void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
		{
			__Trait0.Write(buffer, offset, count);
		}

		
		public void Write(System.ReadOnlySpan<byte> buffer)
		{
			__Trait0.Write(buffer);
		}

		
		public System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
		{
			return __Trait0.WriteAsync(buffer, offset, count, cancellationToken);
		}

		
		public System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, System.Threading.CancellationToken cancellationToken = default)
		{
			return __Trait0.WriteAsync(buffer, cancellationToken);
		}

		
		public void WriteByte(System.Byte value)
		{
			__Trait0.WriteByte(value);
		}

		
		public void WriteTo(System.IO.Stream stream)
		{
			__Trait0.WriteTo(stream);
		}

	}
}
